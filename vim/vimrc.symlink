" Nathaniel Schweinberg
" Inspired by @scrogson, @dougblackio, @thewatts, @nvie

" Launch Config {{{
source ~/.vundlerc
autocmd! bufwritepost .vimrc source %
" }}}

" Colors {{{
syntax on
syntax enable
set t_Co=256
colorscheme wattslandia
" colorscheme solarized
" }}}

" Misc {{{
set ttyfast                     " faster redraw
set backspace=indent,eol,start
set hidden 		" Allows :q of buffers without writing to them, prompts for write before closing all open buffers
" set termencoding=utf-8
" set encoding=utf-8
set history=1000	" remember N : commands
set undolevels=1000
set visualbell		" Use visual bell instead of beeping
set noerrorbells 	" shut up

" Toggle paste mode
" nnoremap <C-B> :set invpaste paste?<CR>
set pastetoggle=<F2>
set clipboard=unnamed " Enable yanking to system keyboard
" }}}

" Spaces & Tabs {{{
set modelines=0		" Prevent reading the last line of a buffer to prevent undesired behavior http://lists.alioth.debian.org/pipermail/pkg-vim-maintainers/2007-June/004020.html
filetype indent on	" enables filetype specific indentation behavior
filetype plugin on	" enables filetype specific plugins

set autoindent       " indent next line to same level as current line
set smartindent      "   ↑ but do it smartly
set smarttab         " <Tab> in front of a line inserts 'shiftwidth' blanks
set shiftwidth=2     "   ↑ use 2 blanks for above
set tabstop=2        " display a <Tab> as 2 spaces
set softtabstop=2    " use 2 spaces for a <Tab>
set expandtab        " expand tabs to spaces
set shiftround       " use multiple of shiftwidth when indenting with '<' and '>'"

" for html
autocmd FileType html setlocal indentkeys-=*<Return>
autocmd FileType html.handlebars setlocal indentkeys-=*<Return>
autocmd FileType eruby setlocal indentkeys-=*<Return>
" }}}

" UI Layout {{{
set number              " show line numbers
set showcmd             " show command in bottom bar
set nocursorline        " highlight current line
set synmaxcol=200       " no syntax highlighting for lines longer than 200 cols"
au VimResized * :wincmd = " resize splits when window is resized
" Make tab completion for files/buffers act like bash
set wildmenu "command-line completion operates in an enhanced way
set wildmode=list:longest
set wildignore=*.swp,tmp,.git,*.png,*.jpg,*.gif,node_modules
set lazyredraw      " don't update the display while executing macros
set showmatch           " Highlight closing ), >, }, ], etc...
set showmode		    " Show current mode on last line
set scrolloff=3		    " keep # of lines visible when scrolling
set sidescrolloff=6     " start scrolling 6 lines from right"
set ruler	    	    " Show the line and column number of the cursor position
set nowrap              " disable wrapping long lines
set cmdheight=2         " Number of screen lines to use for the command-line.  Helps avoiding |hit-enter| prompts.
set textwidth=79        " Maximum width of text that is being inserted.  A longer line will be broken after white space to get this width.
set autoread            " Make sure that buffers change if the file changed
set listchars=tab:▸\  " Display a place holder character for tabs and trailing spaces
set formatoptions+=1    " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid))"
" }}}

" Searching {{{
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
set smartcase		" ignore case if all lower case, otherwise adhere to case
set gdefault            " all searches default to global

" Use sane regex searching
nnoremap / /\v
vnoremap / /\v
" Make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
" }}}

" Folding {{{
" set foldenable          " enable folding
" set foldcolumn=2        " add a fold column
" set foldmethod=indent
set foldlevelstart=99   " start with everything unfolded
" nnoremap <space> za
" }}}

" Line Shortcuts {{{
" move by screen lines instead of file lines (useful when lines wrap)
nnoremap j gj
nnoremap k gk
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]

" Allow capital w to write current buffer
command! W :w

" Move around window splits easier
" https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
" nnoremap <C-h> <C-w>h
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l

let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <C-;> :TmuxNavigatePrevious<cr>

" }}}

" Leader Shortcuts {{{
let mapleader=","
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
"nnoremap <leader>l :call ToggleNumber()<CR>
nmap <leader>l :set list!<CR>
" turn off search highlighting
nnoremap <leader><space> :noh<CR>
" save session. reopen session using vim -S
nnoremap <leader>s :mksession<CR>
nnoremap <leader>a :Ag<space>
nnoremap <leader>c :SyntasticCheck<CR>:Errors<CR>
nnoremap <leader>1 :set number!<CR>

inoremap jk <esc>
" fold tags
nnoremap <leader>ft Vatzf
" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null
" Open verticle split and switch to it
nnoremap <leader>w <C-w>v<C-w>l
" Open horizontal split and switch to it
nnoremap <leader>h <C-w>s<C-w>j

" BlackBox
nnoremap <leader>bu :!blackbox_update % <CR>
" }}}

" Helpful mappings {{{
" Fix indentation / reindent
map <F7> mzgg=G`z<CR>
" Set cwd to current file's directory
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" }}}

" PHP {{{
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
let PHP_removeCRwhenUnix=1
let g:PHP_vintage_case_default_indent = 1

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

let g:php_cs_fixer_level = "psr2"
nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
" }}}

" Javascript {{{
let g:neomake_javascript_enabled_makers = ['eslint']
let g:fixmyjs_rc_path = './.eslintrc'
let g:jsx_ext_required = 0

" let g:neomake_verbose=3
" let g:neomake_logfile='/tmp/error.log'

autocmd! BufWritePost,BufEnter * Neomake
noremap <Leader><Leader>f :Fixmyjs<CR>

" }}}

" Ruby {{{
" Teach vim to syntax highlight Vagrantfile as ruby
augroup vagrant
  au!
  au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END

augroup rspec
    au!
    au FileType ruby map <Leader>rf :call RunCurrentSpecFile()<cr>
    au FileType ruby map <Leader>rn :call RunNearestSpec()<cr>
    au FileType ruby map <Leader>rl :call RunLastSpec()<cr>
    au FileType ruby map <Leader>ra :call RunAllSpecs()<cr>
augroup END
" }}}

" Rails {{{
map <leader>rs :CtrlP app/assets/stylesheets<cr>
map <leader>rj :CtrlP app/assets/javascripts<cr>
map <leader>rv :CtrlP app/views<cr>
map <leader>rc :CtrlP app/controllers<cr>
map <leader>rm :CtrlP app/models<cr>
map <leader>rh :CtrlP app/helpers<cr>
map <leader>rt :CtrlP spec<cr>

map <leader>rr :topleft :split config/routes.rb<cr>
map <leader>rg :topleft 100 :split Gemfile<cr>
" }}}

" Go {{{
augroup go
    au!
    au FileType go nmap <leader>R <Plug>(go-run)
    au FileType go nmap <leader>B <Plug>(go-build)
    au FileType go nmap <leader>T <Plug>(go-test)
    au FileType go nmap <leader>C <Plug>(go-coverage)
augroup END
" }}}

" Elixir {{{
augroup elixir
    au!
    au BufNewFile,BufRead *.ex,*.exs noremap <buffer> <leader>r :!mix test<cr>
    au BufNewFile,BufRead *_test.exs noremap <buffer> <leader>r :exe "!mix test %:" . line(".")<cr>
    au BufNewFile,BufRead *_test.exs noremap <buffer> <leader>R :!mix test %<cr>
    au BufNewFile,BufRead *_test.exs noremap <buffer> <leader>a :!mix test<cr>
augroup END
" }}}

" Phoenix {{{
" Phoenix specific CtrlP mappings
map <leader>ps :CtrlP web/static/css<cr>
map <leader>pj :CtrlP web/static/js<cr>
map <leader>pv :CtrlP web/views<cr>
map <leader>pt :CtrlP web/templates<cr>
map <leader>pc :CtrlP web/controllers<cr>
map <leader>pm :CtrlP web/models<cr>
map <leader>pr :vsp web/router.ex<cr>
map <leader>px :vsp mix.exs<cr>
" }}}

" Handlebars {{{
let g:mustache_abbreviations = 1
" }}}

" neomake {{{
nmap <Leader><Space>o :lopen<CR>      " open location window
nmap <Leader><Space>c :lclose<CR>     " close location window
nmap <Leader><Space>, :ll<CR>         " go to current error/warning
nmap <Leader><Space>n :lnext<CR>      " next error/warning
nmap <Leader><Space>p :lprev<CR>      " previous error/warning
" }}}

" Powerline {{{
"set encoding=utf-8
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
set laststatus=2 " the last window will have a status line
" }}}

" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
map <leader>b :CtrlPBuffer<cr>
" }}}

" Multi Cursor {{{
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
" }}}

" NERDTree {{{
let NERDTreeIgnore = ['\.pyc$', 'build', 'venv', 'egg', 'egg-info/', 'dist', 'docs']
let NERDTreeShowHidden=1
let g:NERDTreeWinSize = 26
let NERDSpaceDelims=1
" }}}

"" Tmux {{{
"if exists('$TMUX') " allows cursor change in tmux mode
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
"else
"    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"endif
"" }}}

" vim-textobj-quote {{{
map <silent> <leader>qc <Plug>ReplaceWithCurly
map <silent> <leader>qs <Plug>ReplaceWithStraight
augroup textobj_quote
  autocmd!
  autocmd FileType html,javascript call textobj#quote#init({'educate': 0})
augroup END
" }}}

" AutoGroups {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END

augroup filetypegroup
    autocmd FileType php,twig setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python,cfg setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType cs setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType apiblueprint,terraform setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType javascript,json,html,css,sass,less,yaml,coffee setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType jade,html.handlebars setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType ruby,pml,eruby,haml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType arduino setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType go setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType markdown setlocal wrap nolist textwidth=0
    autocmd FileType vim setlocal wrap nolist foldmethod=marker
augroup END

augroup buffergroups
    autocmd BufNewFile,BufRead *.rss setfiletype xml
    autocmd BufNewFile,BufRead *.scss setfiletype css.scss
    autocmd BufNewFile,BufRead Capfile,Rakefile,Vagrantfile setfiletype ruby
augroup END

autocmd BufWritePost .vimrc
	\ so $MYVIMRC | call Pl#Load()

" Restore cursor position upon reopening files {{{
autocmd BufReadPost *
    \ if &filetype != "gitcommit" && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
" }}}

" }}}

" Backups {{{
set nobackup
set noswapfile
" }}}

" xmpfilter {{{
" This handy plugin will show the results of the current ruby file
autocmd FileType ruby,erb,haml nmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml xmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml imap <buffer> <F3> <Plug>(xmpfilter-mark)

autocmd FileType ruby,erb,haml nmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml xmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml imap <buffer> <F4> <Plug>(xmpfilter-run)
" }}}

" Surround Plugin config {{{
let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('=')} = "<%= \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r "
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_indent = 1
" }}}

" SnipMate {{{
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['eruby'] = 'eruby,eruby-rails'
" }}}

" Rainbow Parentheses Improved {{{
let g:rainbow_active = 1
noremap <leader>R :RainbowToggle<CR>
" }}}

" Custom Functions {{{
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction

" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
 autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
 " no syntax highlighting etc
 set eventignore+=FileType
 " save memory when other file is viewed
 setlocal bufhidden=unload
 " is read-only (write with :w new_filename)
 setlocal buftype=nowrite
 " no undo possible
 setlocal undolevels=-1
 " display message
 autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

" }}}
