" Nathaniel Schweinberg
" Inspired by @scrogson, @dougblackio, @thewatts, @nvie

" Launch Config {{{
source ~/.vplugrc
autocmd! bufwritepost .vimrc source %
autocmd! bufwritepost init.vim source %
" }}}

" Colors {{{
syntax enable
set t_Co=256
" colorscheme base16-default
" let base16colorspace=256

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0

let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_cursor_line_number_background = 1
" colorscheme nord

set termguicolors
set background=dark
colorscheme monokai_pro

" set background=light
" colorscheme PaperColor
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=none   ctermbg=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=none ctermbg=8
" au ColorScheme * hi Normal ctermbg=none guibg=none
" au ColorScheme * hi NonText ctermbg=none guibg=none

" }}}

" Misc {{{
set ttyfast                     " faster redraw
set backspace=indent,eol,start
set hidden    " Allows :q of buffers without writing to them, prompts for write before closing all open buffers
set mouse=a   " enables mouse support
" set termencoding=utf-8
" set encoding=utf-8
set history=1000  " remember N : commands
set undolevels=1000
set visualbell    " Use visual bell instead of beeping
set noerrorbells  " shut up

" Toggle paste mode
" nnoremap <C-B> :set invpaste paste?<CR>
set pastetoggle=<F2>
set clipboard=unnamed " Enable yanking to system keyboard

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP

" Source https://vim.fandom.com/wiki/Map_semicolon_to_colon
nmap ; :
noremap ;; ;
" }}}

" Spaces & Tabs {{{
set modelines=0   " Prevent reading the last line of a buffer to prevent undesired behavior http://lists.alioth.debian.org/pipermail/pkg-vim-maintainers/2007-June/004020.html
filetype indent on  " enables filetype specific indentation behavior
filetype plugin on  " enables filetype specific plugins

set autoindent       " indent next line to same level as current line
set smartindent      "   ↑ but do it smartly
set smarttab         " <Tab> in front of a line inserts 'shiftwidth' blanks
set shiftwidth=2     "   ↑ use 2 blanks for above
set tabstop=2        " display a <Tab> as 2 spaces
set softtabstop=2    " use 2 spaces for a <Tab>
set expandtab       " expand tabs to spaces
set list             " show special characters
set shiftround       " use multiple of shiftwidth when indenting with '<' and '>'"

" for html
autocmd FileType html setlocal indentkeys-=*<Return>
autocmd FileType html.handlebars setlocal indentkeys-=*<Return>
autocmd FileType eruby setlocal indentkeys-=*<Return>
" }}}

" UI Layout {{{
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set synmaxcol=200       " no syntax highlighting for lines longer than 200 cols"
au VimResized * :wincmd = " resize splits when window is resized
" Make tab completion for files/buffers act like bash
set wildmenu "command-line completion operates in an enhanced way
set wildmode=list:longest
set wildignore=*.swp,tmp,.git,*.png,*.jpg,*.gif,node_modules
set lazyredraw      " don't update the display while executing macros
set showmatch           " Highlight closing ), >, }, ], etc...
set showmode        " Show current mode on last line
set scrolloff=3       " keep # of lines visible when scrolling
set sidescrolloff=6     " start scrolling 6 lines from right"
set ruler           " Show the line and column number of the cursor position
set nowrap              " disable wrapping long lines
set cmdheight=2         " Number of screen lines to use for the command-line.  Helps avoiding |hit-enter| prompts.
set textwidth=79        " Maximum width of text that is being inserted.  A longer line will be broken after white space to get this width.
set autoread            " Make sure that buffers change if the file changed
set showbreak=↪\
set listchars=tab:.\ ,trail:␣,extends:…,eol:¬
set formatoptions+=1    " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid))"
set updatetime=300 " Smaller updatetime for CursorHold & CursorHoldI
set shortmess+=c " don't give |ins-completion-menu| messages.

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
" }}}

" Searching {{{
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
set smartcase   " ignore case if all lower case, otherwise adhere to case
set gdefault            " all searches default to global

" Use sane regex searching
nnoremap / /\v
vnoremap / /\v
" Make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
inoremap jj <ESC>
inoremap hh <ESC>
" }}}

" Folding {{{
" set foldenable          " enable folding
" set foldcolumn=2        " add a fold column
" set foldmethod=indent
set foldlevelstart=99   " start with everything unfolded
nnoremap <leader>z
" }}}

" Line Shortcuts {{{
" move by screen lines instead of file lines (useful when lines wrap)
nnoremap j gj
nnoremap k gk
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]

" Allow capital w to write current buffer
command! W :w

" Move around window splits easier
" https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" }}}

" Leader Shortcuts {{{
let mapleader=","
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>vp :vsp ~/.vplugrc<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nmap <leader>l :set list!<CR>
" turn off search highlighting
nnoremap <leader><space> :noh<CR>
" nnoremap <leader>1 :set number!<CR>

inoremap jk <esc>
" fold tags

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null

" Open verticle split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Open horizontal split and switch to it
nnoremap <leader>h <C-w>s<C-w>j
" }}}

" Helpful mappings {{{
" Fix indentation / reindent
map <F7> mzgg=G`z<CR>
" }}}
"
" .lvimrc {{{
let g:localvimrc_sandbox = 0
let g:localvimrc_whitelist=[
      \'/Users/aang/Work/',
      \'/Users/aang/Work/repos/vantage-backend',
      \'/Users/aang/Work/repos/vantage',
      \'/Users/aang/Code/letters-to-reps/frontend'
      \]
" }}}
"
" ale {{{
let g:ale_linters = {}
let g:ale_fixers = {}
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠'
let g:ale_sign_column_always = 1

let g:ale_fix_on_save = 1
nmap <silent> <C-e>p <Plug>(ale_previous_wrap)
nmap <silent> <C-e>n <Plug>(ale_next_wrap)
noremap <Leader><Leader>f :ALEFix<CR>
" }}}

" coc.nvim {{{
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-diagnostic',
  \ 'coc-emmet',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-phpls',
  \ 'coc-sh',
  \ 'coc-tsserver',
  \ 'coc-yaml',
  \]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader><leader>f  <Plug>(coc-format-selected)
nmap <leader><leader>f  <Plug>(coc-format-selected)

" TODO I'd like to figure out a cleaner way of doing this, if possible
autocmd BufEnter *.js,*.ts,*.jsx,*.tsx
      \ nmap <leader><leader>f  :CocCommand eslint.executeAutofix<CR> |
      \ xmap <leader><leader>f  :CocCommand eslint.executeAutofix<CR> |
autocmd BufLeave *.js,*.ts,*.jsx,*.tsx
      \ nmap <leader><leader>f  <Plug>(coc-format-selected) |
      \ xmap <leader><leader>f  <Plug>(coc-format-selected) |

" Trigger codeaction (a popup with available actions that can be performed
" under the cursor)
nmap <leader>do <Plug>(coc-codeaction)
" }}}

" Powerline {{{
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#ale#enabled = 1
set laststatus=2 " the last window will have a status line
let g:airline#extensions#whitespace#enabled=0
" }}}

" fzf {{{
if executable("rg")
  " ## rg
  set grepprg=rg\ --vimgrep                                                       "Use ripgrep for grepping
  function! s:CompleteRg(arg_lead, line, pos)
    let l:args = join(split(a:line)[1:])
    return systemlist('get_completions rg ' . l:args)
  endfunction

  " Add support for ripgrep
  " https://github.com/dsifford/.dotfiles/blob/master/vim/.vimrc#L130
	function! RipgrepFzf(query, fullscreen)
		let command_fmt = 'rg --column --no-ignore --line-number --no-heading --color=always --smart-case -- %s || true'
		let initial_command = printf(command_fmt, shellescape(a:query))
		let reload_command = printf(command_fmt, '{q}')
		let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
		call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
	endfunction

	command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)
endif

nmap <Leader>f :Files<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>h :History<CR>
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>
nmap <Leader>a :Rg<Space>
nmap <Leader>A :RgAll<Space>
nmap <Leader>H :Helptags!<CR>
nmap <Leader>C :Commands<CR>
nmap <Leader>M :Maps<CR>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}
" }}}

" Multi Cursor {{{
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
" }}}

" NERDTree {{{
let g:NERDSpaceDelims=1
let g:NERDTreeMinimalUI = 0
let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 30
nnoremap <leader>n :NERDTreeToggle<CR>
" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

" Restore cursor position upon reopening files {{{
autocmd BufReadPost *
      \ if &filetype != "gitcommit" && line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" }}}

" Backups {{{
set nobackup
set noswapfile
" }}}

" Surround Plugin config {{{
let g:surround_indent = 1
" }}}

" Rainbow Parentheses Improved {{{
let g:rainbow_active = 1
" }}}

" Custom Functions {{{
" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
  " save last search & cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
" no syntax highlighting etc
set eventignore+=FileType
" save memory when other file is viewed
setlocal bufhidden=unload
" is read-only (write with :w new_filename)
setlocal buftype=nowrite
" no undo possible
setlocal undolevels=-1
" display message
autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

" }}}

" Terminal Emulation {{{
set splitright
set splitbelow
nnoremap <leader>vt :VTerm<CR>
" }}}
"
" AutoGroups {{{
augroup conf
  au!
  au BufEnter,BufRead *.conf setf conf
augroup END

augroup configgroup
  autocmd!
  autocmd VimEnter * highlight clear SignColumn
  autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
  autocmd BufEnter *.cls setlocal filetype=java
  autocmd BufEnter *.zsh-theme setlocal filetype=zsh
  autocmd BufEnter .vplugrc setlocal filetype=vim
  autocmd BufEnter Makefile setlocal noexpandtab
  autocmd BufEnter *.sh.tpl setlocal filetype=sh
  autocmd BufEnter *.sls,*.neon,*.yml.tpl,*.template setlocal filetype=yaml expandtab
augroup END

augroup filetypegroup
  autocmd FileType php,twig setlocal ts=4 sts=4 sw=4
  autocmd FileType python,cfg setlocal ts=4 sts=4 sw=4
  autocmd FileType cs setlocal ts=4 sts=4 sw=4
  autocmd FileType apiblueprint,terraform setlocal ts=2 sts=2 sw=2
  autocmd FileType javascript,html,css,sass,less,coffee setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType jade,html.handlebars,blade setlocal ts=2 sts=2 sw=2
  autocmd FileType ruby,pml,eruby,haml setlocal ts=2 sts=2 sw=2
  autocmd FileType arduino setlocal ts=2 sts=2 sw=2
  autocmd FileType go setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd FileType markdown setlocal wrap textwidth=0 ts=4 sts=4 sw=4
  autocmd FileType vim setlocal wrap foldmethod=marker
  autocmd filetype json setlocal ts=4 sts=4 sw=4 expandtab
  autocmd filetype yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sh setlocal tabstop=2 shiftwidth=2 softtabstop=2
augroup END

augroup buffergroups
  autocmd BufNewFile,BufRead *.rss setfiletype xml
  autocmd BufNewFile,BufRead *.scss setfiletype css.scss
  autocmd BufNewFile,BufRead Capfile,Rakefile,Vagrantfile setfiletype ruby
  autocmd BufNewFile,BufRead *.talon setfiletype talon
augroup END

autocmd BufWritePost .vimrc so $MYVIMRC
" }}}
"
" PHP {{{
let PHP_removeCRwhenUnix=1
let g:PHP_vintage_case_default_indent = 1

let g:ale_php_phpcs_standard = "./ruleset.xml"
let g:ale_fixers['php'] = ['phpcbf']

let g:wordpress_vim_wordpress_path = "./wordpress"

" https://www.erickpatrick.net/blog/my-neovim-setup-for-php-development
if executable('intelephense')
  augroup LspPHPIntelephense
    au!
    au User lsp_setup call lsp#register_server({
        \ 'name': 'intelephense',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
        \ 'whitelist': ['php'],
        \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
        \ 'workspace_config': {
        \   'intelephense': {
        \     'files': {
        \       'maxSize': 1000000,
        \       'associations': ['*.php', '*.phtml'],
        \       'exclude': [],
        \     },
        \     'completion': {
        \       'insertUseDeclaration': v:true,
        \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
        \       'triggerParameterHints': v:true,
        \       'maxItems': 100,
        \     },
        \     'format': {
        \       'enable': v:true
        \     },
        \   },
        \ }
        \})
  augroup END
endif
" }}}

" Javascript v2 {{{
let g:ale_linter_aliases = {'typescriptreact': 'typescript'}

" enable highlighting when I enter a JavaScript or TypeScript buffer, and
" disable it when I leave:
" https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" conditionally load coc-prettier if in use
if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

" conditionally load coc-eslint if in use
if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif
" }}}

" Ruby {{{
" Teach vim to syntax highlight Vagrantfile as ruby
augroup vagrant
  au!
  au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END
" }}}

" Go {{{
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

augroup go
  au!
  au FileType go nmap <leader>R <Plug>(go-run)
  au FileType go nmap <leader>B <Plug>(go-build)
  au FileType go nmap <leader>T <Plug>(go-test)
  au FileType go nmap <leader>C <Plug>(go-coverage)
augroup END
" }}}

" Terraform {{{
let g:terraform_fmt_on_save = 1
" }}}
