" Nathaniel Schweinberg
" Inspired by @scrogson, @dougblackio, @thewatts, @nvie

" Launch Config {{{
source ~/.vplugrc
autocmd! bufwritepost .vimrc source %
" }}}

" Colors {{{
syntax on
syntax enable
set t_Co=256
" colorscheme base16-default
let base16colorspace=256
set background=dark

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0

let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_cursor_line_number_background = 1

" colorscheme nord

set termguicolors
colorscheme monokai_pro
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=none   ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=none ctermbg=8
au ColorScheme * hi Normal ctermbg=none guibg=none
au ColorScheme * hi NonText ctermbg=none guibg=none
" }}}



" Misc {{{
set ttyfast                     " faster redraw
set backspace=indent,eol,start
set hidden    " Allows :q of buffers without writing to them, prompts for write before closing all open buffers
set mouse=a   " enables mouse support
" set termencoding=utf-8
" set encoding=utf-8
set history=1000  " remember N : commands
set undolevels=1000
set visualbell    " Use visual bell instead of beeping
set noerrorbells  " shut up

" Toggle paste mode
" nnoremap <C-B> :set invpaste paste?<CR>
set pastetoggle=<F2>
set clipboard=unnamed " Enable yanking to system keyboard

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" replace currently selected text with default register
" without yanking it
vnoremap <leader>p "_dP
" }}}

" Spaces & Tabs {{{
set modelines=0   " Prevent reading the last line of a buffer to prevent undesired behavior http://lists.alioth.debian.org/pipermail/pkg-vim-maintainers/2007-June/004020.html
filetype indent on  " enables filetype specific indentation behavior
filetype plugin on  " enables filetype specific plugins

set autoindent       " indent next line to same level as current line
set smartindent      "   ↑ but do it smartly
set smarttab         " <Tab> in front of a line inserts 'shiftwidth' blanks
set shiftwidth=2     "   ↑ use 2 blanks for above
set tabstop=2        " display a <Tab> as 2 spaces
set softtabstop=2    " use 2 spaces for a <Tab>
set expandtab       " expand tabs to spaces
set list             " show special characters
set shiftround       " use multiple of shiftwidth when indenting with '<' and '>'"

" for html
autocmd FileType html setlocal indentkeys-=*<Return>
autocmd FileType html.handlebars setlocal indentkeys-=*<Return>
autocmd FileType eruby setlocal indentkeys-=*<Return>
" }}}

" UI Layout {{{
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set synmaxcol=200       " no syntax highlighting for lines longer than 200 cols"
au VimResized * :wincmd = " resize splits when window is resized
" Make tab completion for files/buffers act like bash
set wildmenu "command-line completion operates in an enhanced way
set wildmode=list:longest
set wildignore=*.swp,tmp,.git,*.png,*.jpg,*.gif,node_modules
set lazyredraw      " don't update the display while executing macros
set showmatch           " Highlight closing ), >, }, ], etc...
set showmode        " Show current mode on last line
set scrolloff=3       " keep # of lines visible when scrolling
set sidescrolloff=6     " start scrolling 6 lines from right"
set ruler           " Show the line and column number of the cursor position
set nowrap              " disable wrapping long lines
set cmdheight=2         " Number of screen lines to use for the command-line.  Helps avoiding |hit-enter| prompts.
set textwidth=79        " Maximum width of text that is being inserted.  A longer line will be broken after white space to get this width.
set autoread            " Make sure that buffers change if the file changed
set showbreak=↪\
set listchars=tab:.\ ,trail:␣,extends:…,eol:¬
set formatoptions+=1    " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid))"
" }}}

" Searching {{{
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
set smartcase   " ignore case if all lower case, otherwise adhere to case
set gdefault            " all searches default to global

" Use sane regex searching
nnoremap / /\v
vnoremap / /\v
" Make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
inoremap jj <ESC>
inoremap hh <ESC>
" }}}

" Folding {{{
" set foldenable          " enable folding
" set foldcolumn=2        " add a fold column
" set foldmethod=indent
set foldlevelstart=99   " start with everything unfolded
nnoremap <space> za
" }}}

" Line Shortcuts {{{
" move by screen lines instead of file lines (useful when lines wrap)
nnoremap j gj
nnoremap k gk
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]

" Allow capital w to write current buffer
command! W :w

" Move around window splits easier
" https://github.com/neovim/neovim/issues/2048#issuecomment-78045837
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" }}}

" Leader Shortcuts {{{
let mapleader=","
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nmap <leader>l :set list!<CR>
" turn off search highlighting
nnoremap <leader><space> :noh<CR>
nnoremap <leader>1 :set number!<CR>

inoremap jk <esc>
" fold tags
" nnoremap <leader>ft Vatzf
" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null
" Open verticle split and switch to it
nnoremap <leader>w <C-w>v<C-w>l
" Open horizontal split and switch to it
nnoremap <leader>h <C-w>s<C-w>j

" ack.vim {{{
" nnoremap <leader>a :Ack<space>
" let g:ackprg = 'ag --vimgrep --smart-case'
" cnoreabbrev ag Ack
" cnoreabbrev aG Ack
" cnoreabbrev Ag Ack
" cnoreabbrev AG Ack
" }}}

" Helpful mappings {{{
" Fix indentation / reindent
map <F7> mzgg=G`z<CR>
" Set cwd to current file's directory
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" Update syntax highlighting
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

" }}}
"
" .lvimrc {{{
let g:localvimrc_sandbox = 0
let g:localvimrc_whitelist=[
      \'/Users/aang/Work/'
      \]
" }}}
"
" PHP {{{
let PHP_removeCRwhenUnix=1
let g:PHP_vintage_case_default_indent = 1

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

let g:ale_php_phpcs_standard = "./ruleset.xml"
let g:ale_fixers = {}
let g:ale_linters = {}
let g:ale_fixers['php'] = ['phpcbf']

let g:pdv_template_dir = $HOME ."/.vim/plugged/pdv/templates_snip"
" nnoremap <leader>cp :call PhpDocSingle()<CR>
nnoremap  <leader>cp :call pdv#DocumentWithSnip()<CR>
" }}}

" Javascript {{{
let g:fixmyjs_rc_path = './.eslintrc'
let g:jsx_ext_required = 0

noremap <Leader><Leader>f :ALEFix<CR>

autocmd FileType javascript.jsx runtime! ftplugin/html/sparkup.vim
autocmd FileType ejs runtime! ftplugin/html/sparkup.vim

" }}}

" Ruby {{{
" Teach vim to syntax highlight Vagrantfile as ruby
augroup vagrant
  au!
  au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END
" }}}

" Go {{{
augroup go
  au!
  au FileType go nmap <leader>R <Plug>(go-run)
  au FileType go nmap <leader>B <Plug>(go-build)
  au FileType go nmap <leader>T <Plug>(go-test)
  au FileType go nmap <leader>C <Plug>(go-coverage)
augroup END
" }}}

" Terraform {{{
let g:terraform_fmt_on_save = 1
" }}}

" ale {{{
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠'
let g:ale_sign_column_always = 1

let g:ale_fixers['javascript'] = ['prettier-eslint']
let g:ale_linters['javascript'] = ['eslint']
let g:ale_fixers['typescript'] = ['prettier-eslint']
let g:ale_fixers['yaml'] = ['prettier']
let g:ale_fixers['json'] = []
let g:ale_fix_on_save = 1
" let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5 --no-semi'
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)
" }}}

" Powerline {{{
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#ale#enabled = 1
set laststatus=2 " the last window will have a status line
" }}}

" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)|vendor|node_modules|public$'
" map <leader>b :CtrlPBuffer<cr>
" }}}


" fzf {{{

if executable("rg")
  " ## rg
  set grepprg=rg\ --vimgrep                                                       "Use ripgrep for grepping
  function! s:CompleteRg(arg_lead, line, pos)
    let l:args = join(split(a:line)[1:])
    return systemlist('get_completions rg ' . l:args)
  endfunction

  " Add support for ripgrep
  " https://github.com/dsifford/.dotfiles/blob/master/vim/.vimrc#L130
    " command! -bang -complete=customlist,s:CompleteRg -nargs=* Rg
    " \ call fzf#vim#grep(
    " \   'rg --column --line-number --no-heading --color=always --smart-case --glob "!{.git,node_modules}/*"' . <q-args>, 1,
    " \   <bang>0 ? fzf#vim#with_preview('up:60%')
    " \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    " \   <bang>0)
  command! -bang -complete=customlist,s:CompleteRg -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --color=always --fixed-strings --ignore-case --hidden --follow --glob "!{.git,node_modules}/*" '.shellescape(<q-args>).'| tr -d "\017"', 1,
        \   <bang>0 ? fzf#vim#with_preview('up:60%')
        \           : fzf#vim#with_preview('right:50%', '?'),
        \   <bang>0)
  command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>,
        \   <bang>0 ? fzf#vim#with_preview('up:60%')
        \           : fzf#vim#with_preview('right:50%', '?'),
        \   <bang>0)
endif
nmap <Leader>f :Files<CR>
nmap <Leader>G :GFiles<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>h :History<CR>
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>
nmap <Leader>a :Rg<Space>
nmap <Leader>H :Helptags!<CR>
nmap <Leader>C :Commands<CR>
nmap <Leader>M :Maps<CR>
" }}}

" Multi Cursor {{{
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
" }}}

" NERDTree {{{
let NERDTreeShowHidden=1
let g:NERDTreeWinSize = 26
let NERDSpaceDelims=1
" }}}

" AutoGroups {{{
augroup configgroup
  autocmd!
  autocmd VimEnter * highlight clear SignColumn
  autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
  autocmd BufEnter *.cls setlocal filetype=java
  autocmd BufEnter *.zsh-theme setlocal filetype=zsh
  autocmd BufEnter Makefile setlocal noexpandtab
  autocmd BufEnter *.sh.tpl setlocal filetype=sh
  autocmd BufEnter *.sls,*.neon,*.yml.tpl,*.template setlocal filetype=yaml expandtab
augroup END

augroup filetypegroup
  autocmd FileType php,twig setlocal ts=4 sts=4 sw=4
  autocmd FileType python,cfg setlocal ts=4 sts=4 sw=4
  autocmd FileType cs setlocal ts=4 sts=4 sw=4
  autocmd FileType apiblueprint,terraform setlocal ts=2 sts=2 sw=2
  autocmd FileType javascript,html,css,sass,less,yaml,coffee setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType jade,html.handlebars,blade setlocal ts=2 sts=2 sw=2
  autocmd FileType ruby,pml,eruby,haml setlocal ts=2 sts=2 sw=2
  autocmd FileType arduino setlocal ts=2 sts=2 sw=2
  autocmd FileType go setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd FileType markdown setlocal wrap textwidth=0 ts=4 sts=4 sw=4
  autocmd FileType vim setlocal wrap foldmethod=marker
  autocmd filetype json setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType sh setlocal tabstop=2 shiftwidth=2 softtabstop=2
augroup END

augroup buffergroups
  autocmd BufNewFile,BufRead *.rss setfiletype xml
  autocmd BufNewFile,BufRead *.scss setfiletype css.scss
  autocmd BufNewFile,BufRead Capfile,Rakefile,Vagrantfile setfiletype ruby
augroup END

autocmd BufWritePost .vimrc so $MYVIMRC

" Restore cursor position upon reopening files {{{
autocmd BufReadPost *
      \ if &filetype != "gitcommit" && line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
" }}}

" }}}

" Backups {{{
set nobackup
set noswapfile
" }}}

" Surround Plugin config {{{
let g:surround_indent = 1
" }}}

" SnipMate {{{
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['eruby'] = 'eruby,eruby-rails'
" }}}

" Rainbow Parentheses Improved {{{
let g:rainbow_active = 1
noremap <leader>R :RainbowToggle<CR>
" }}}



" Custom Functions {{{
" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
  " save last search & cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

" file is large from 10mb
let g:LargeFile = 1024 * 1024 * 10
augroup LargeFile
autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function LargeFile()
" no syntax highlighting etc
set eventignore+=FileType
" save memory when other file is viewed
setlocal bufhidden=unload
" is read-only (write with :w new_filename)
setlocal buftype=nowrite
" no undo possible
setlocal undolevels=-1
" display message
autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

" }}}

" Terminal Emulation {{{
nnoremap <leader>vt :VTerm<CR>
set splitright
" }}}

" AutoFormat {{{
" au BufWrite *.json :Autoformat
" let g:autoformat_autoindent = 0
" let g:autoformat_retab = 0
" let g:autoformat_remove_trailing_spaces = 0
" }}}
