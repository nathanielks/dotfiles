" Nathaniel Schweinberg
" Inspired by @scrogson, @dougblackio, @thewatts, @nvie

" Launch Config {{{
set nocompatible " Use vim settings, rather then vi settings (much better!)
source ~/.vundlerc
autocmd! bufwritepost .vimrc source %
" }}}

" Colors {{{
syntax on
syntax enable
set t_Co=256
colorscheme flatlandia
" }}}

" Misc {{{
set ttyfast                     " faster redraw
set backspace=indent,eol,start
set hidden 		" Allows :q of buffers without writing to them, prompts for write before closing all open buffers
set history=1000	" remember N : commands
set undolevels=1000
set visualbell		" Use visual bell instead of beeping
set noerrorbells 	" shut up

" Toggle paste mode
nnoremap <C-B> :set invpaste paste?<CR>
set pastetoggle=<C-B>
" }}}

" Spaces & Tabs {{{
set tabstop=4           " 4 space tab
set expandtab           " use spaces for tabs
set softtabstop=4       " 4 space tab
set shiftwidth=4	" Number of spaces to use for each step of (auto)indent)
set modelines=1		" number of lines that is checked for set commands.
filetype indent on	" enables filetype specific indentation
filetype plugin on	" enables filetype specific plugins
set autoindent		" Copy indent from current line when starting a new line
set smartindent		" indent again when going to nested scope
" }}}

" UI Layout {{{
set number              " show line numbers
set showcmd             " show command in bottom bar
set nocursorline        " highlight current line

" Make tab completion for files/buffers act like bash
set wildmenu "command-line completion operates in an enhanced way
set wildmode=list:longest
set wildignore=*.swp,tmp,.git,*.png,*.jpg,*.gif,node_modules

"set lazyredraw
set showmatch           " Highlight closing ), >, }, ], etc...
set showmode		    " Show current mode on last line
set scrolloff=3		    " keep # of lines visible when scrolling
set ruler	    	    " Show the line and column number of the cursor position
set nowrap              " disable wrapping long lines
set cmdheight=2         " Number of screen lines to use for the command-line.  Helps avoiding |hit-enter| prompts.
set textwidth=79        " Maximum width of text that is being inserted.  A longer line will be broken after white space to get this width.
set autoread            " Make sure that buffers change if the file changed
set listchars=tab:â–¸\  " Display a place holder character for tabs and trailing spaces
set formatoptions+=1    " When wrapping paragraphs, don't end lines with 1-letter words (looks stupid))"
" }}}

" Searching {{{"{{{
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
set smartcase		" ignore case if all lower case, otherwise adhere to case

" Use sane regex searching
nnoremap / /\v
vnoremap / /\v
" Make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
" }}}"}}}

" Folding {{{
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
nnoremap <space> za
set foldlevelstart=10    " start with fold level of 10
" }}}

" Line Shortcuts {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]

" Allow capital w to write current buffer
command! W :w

" Move around window splits easier
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" }}}

" Leader Shortcuts {{{
let mapleader=","
nnoremap <leader>w :NERDTreeToggle<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
"nnoremap <leader>l :call ToggleNumber()<CR>
nmap <leader>l :set list!<CR>
" turn off search highlighting
nnoremap <leader><space> :noh<CR>
" save session. reopen session using vim -S
nnoremap <leader>s :mksession<CR>
nnoremap <leader>a :Ag
nnoremap <leader>c :SyntasticCheck<CR>:Errors<CR>
nnoremap <leader>1 :set number!<CR>
inoremap jk <esc>

" fold tags
nnoremap <leader>ft Vatzf

" strip all trailing whitespace in the current file
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null
" }}}

" Helpful mappings {{{
" Fix indentation / reindent
map <F7> mzgg=G`z<CR>
" Set cwd to current file's directory
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
" }}}

" PHP {{{
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
let PHP_removeCRwhenUnix=1
let g:PHP_vintage_case_default_indent = 1

function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END
" }}}

" Ruby {{{
" Teach vim to syntax highlight Vagrantfile as ruby
augroup vagrant
  au!
  au BufRead,BufNewFile Vagrantfile set filetype=ruby
augroup END
" }}}

" Rails {{{
map <leader>gs :CtrlP app/assets/stylesheets<cr>
map <leader>gj :CtrlP app/assets/javascripts<cr>
map <leader>gv :CtrlP app/views<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>gt :CtrlP spec<cr>

map <leader>gr :topleft :split config/routes.rb<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>
" }}}

" Go {{{
au FileType go nmap <leader>R <Plug>(go-run)
au FileType go nmap <leader>B <Plug>(go-build)
au FileType go nmap <leader>T <Plug>(go-test)
au FileType go nmap <leader>C <Plug>(go-coverage)
" }}}

" neocomplete {{{
let g:neocomplete#enable_at_startup = 1
" }}}

" Handlebars {{{
let g:mustache_abbreviations = 1
" }}}

" Powerline {{{
"set encoding=utf-8
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
set laststatus=2 " the last window will have a status line
" }}}

" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
map <leader>b :CtrlPBuffer<cr>
" }}}

" Multi Cursor {{{
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
" }}}

" NERDTree {{{
let NERDTreeIgnore = ['\.pyc$', 'build', 'venv', 'egg', 'egg-info/', 'dist', 'docs']
let NERDTreeShowHidden=1
let g:NERDTreeWinSize = 26
let NERDSpaceDelims=1
" }}}

"" Tmux {{{
"if exists('$TMUX') " allows cursor change in tmux mode
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
"else
"    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"endif
"" }}}

" vim-textobj-quote {{{
map <silent> <leader>qc <Plug>ReplaceWithCurly
map <silent> <leader>qs <Plug>ReplaceWithStraight
augroup textobj_quote
  autocmd!
  autocmd FileType html,javascript call textobj#quote#init({'educate': 0})
augroup END
" }}}

" AutoGroups {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END

augroup filetypegroup
    autocmd FileType php,twig setlocal ts=4 sts=4 sw=4 noexpandtab
    autocmd FileType python,cfg setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType cs setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType apiblueprint,terraform setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType javascript,json,html,css,sass,less,yaml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType jade,html.handlebars setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType ruby,pml,eruby,haml setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType arduino setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType go setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType markdown setlocal wrap nolist
augroup END

augroup buffergroups
    autocmd BufNewFile,BufRead *.rss setfiletype xml
    autocmd BufNewFile,BufRead *.scss setfiletype css.scss
    autocmd BufNewFile,BufRead Capfile,Rakefile,Vagrantfile setfiletype ruby
augroup END

autocmd FocusLost * :wa
autocmd BufWritePost .vimrc
	\ so $MYVIMRC | call Pl#Load()
" }}}

" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" xmpfilter {{{
" This handy plugin will show the results of the current ruby file
autocmd FileType ruby,erb,haml nmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml xmap <buffer> <F3> <Plug>(xmpfilter-mark)
autocmd FileType ruby,erb,haml imap <buffer> <F3> <Plug>(xmpfilter-mark)

autocmd FileType ruby,erb,haml nmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml xmap <buffer> <F4> <Plug>(xmpfilter-run)
autocmd FileType ruby,erb,haml imap <buffer> <F4> <Plug>(xmpfilter-run)
" }}}

" Surround Plugin config {{{
let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('=')} = "<%= \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r "
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_indent = 1
" }}}

" SnipMate {{{
let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['eruby'] = 'eruby,eruby-rails'
" }}}


" Custom Functions {{{
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" }}}

" vim:foldmethod=marker:foldlevel=0
